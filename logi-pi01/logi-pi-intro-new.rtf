{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22 Raspberry Pi meets FPGA - LOGi-Pi\par
\par
Last months Arduino - Raspberry Pi usage article  introduced the option of directly connecting to, developing, and running an Arduino from the Raspberry Pi. This opens the door for many usages that would not otherwise be available running either of the platforms singularly.  Bringing different technologies together in this way enables wider capability in a system.  Similar to joining the Raspberry Pi and the Arduino, it is possible to connect many more technological standards to the Raspberry Pi to enable an electronic smorgasbord of functionality.  There are so many different electronics standards, interfaces, and processing architectures, and now there\rquote s a way to use them together with the Logi-Pi. \par
\par
The sea of electronics\par
We work in a sea of continually expanding electronics boards and modules.  Never has there been such an opportunity to work with so many different varieties of modules and processing architectures.  There has been an explosion of different electronics options for electronics modules from parts and connectors below .4mm pitch all the way up to the long used standard of 2.54mm pitch. There is the Arduino platform and shields, the Raspberry Pi platform and Plates, the Digilent Inc PMOD modules and Xilinx\rquote s high performance FMC expansion module standard and many more.  Each of these standards has a myriad of off-the-shelf electronics plug in modules that can be plugged into the corresponding family of development boards enabling the platform to be used in a wide range of different applications. These standards were initially developed to meet the specific needs of the corresponding family only.  What if all of these modules could be used by a wider audience and could be used on many different development platforms?   The potential for uses and applications would go up exponentially.   What if these different module standards could be not only with well known CPU platforms, but with FPGA platforms as well?  What if all of these technologies could be used together?\par
\par
FPGA technology - Parallel processing \par
FPGA technology is highly contrasting to the more well known and widely used CPU technology. There a few key differences between the two.  At the low level, FPGAs are made of transistor configurations that make up logic gates that combine to make  combinational logic or flip flops that can then combine to make up register transfer logic (RTL)  and the hierarchy and abstractions  keeps going up from there. These combinations and abstractions are put together to create CPUs, custom hardware processing modules that are found in ASICS and/or the combination of the multitude of integrated circuits found on the market today. \par
\par
FPGAs are similar to CPUs in that they are able to process data.  If a CPU needs to handle tasks A, B and C, the it would typically start with task A and move through task B and C in a linear fashion to finish the tasks.  As the CPU is given new tasks, the tasks are added sequentially and are processed until they are all finished.  The CPU may become loaded with too many tasks or tasks that take a large number of instructions to complete, slowing down the processing or causing errors.  This often happens, for example, in real-time systems.  The solution would be to either remove some of the tasks or use a faster processor.\par
\par
If an FPGA had the same tasks, A,B,C, the tasks could be constructed so that each task was being processed at the same time or in parallel.  Any new tasks are also processed in parallel so no additional time is required for the additional processing.  Tasks can continue to be added as long as there is enough logic within the FPGA.\par
\par
This example is not to show that FPGAs are superior to CPUs, but to show that the two technologies operate very differently.  Both are very good at doing what they do in their respective applications. The FPGA ability to have new functionality added to it without affecting the performance of other functionality makes it great for applications that require flexibility.    The complementary nature of operation between CPUs and FPGAs is also the reason that they work very well when used with each other.  When used together, these qualities of the CPUs and FPGAs complement each other and deliver outstanding results.  \par
\par
FPGAs are Logic Fabric - FPGAs are like a Chameleon\par
FPGAs are widely used in the electronics industry because of their unrivaled ability to be fully reconfigured to support any number of contrasting applications while not requiring any modification to the PCB hardware or design.  FPGAs are commonly referred to as \ldblquote logic fabric\rdblquote .  This term implies that the logic fabric can be modified, cut, pieced and applied in many different configurations to create customized applications that otherwise might require the design and fabrication of an ASIC (very expensive); or by using a mixture of different discrete logic and/or processing solutions.   Many times FPGAs are used in designs knowing that the design requirements will change and the FPGAs would need to be updated to meet the changes without modifying the existing board hardware. The only change that would be required is for new HDL code to be written and loaded into the FPGA, assuming the inputs and outputs have not changed. In this way, FPGAs are like a chameleon, taking on new colors or disguises to adapt to changing environments. \par
\par
Introducing the LOGi-Pi\par
The LOGi-Pi is a member of the LOGi Family of FPGA development boards.  It was designed as a solution that unifies the wide range of electronics that are currently available on the market.  The LOGi-Pi was designed to provide a plug-and-play experience that supports the most widely used electronics module interfacing standards.  This allows the maximum number of off-the-shelf hardware modules to be directly compatible in a plug-and-play manner with the LOGi-Pi.   The LOGi-Pi has drivers and applications that create a seamless solution for users who want to use an FPGA, high performance processing CPU. and a multitude of available add-on modules.\par
\par
\par
Maximum Interfacing Compatibility with existing modules\par
The LOGi-Pi seeks to allow as much plug-and-play expansion to existing available hardware as possible by using widely available and low-cost, off-the-shelf hardware.  PMODs and Arduino Shields were chosen to be used as a standard interface, based on their wide market usage, availability, and cost.  There are currently 59 PMODs and 281 Arduino Shields available that could be used to add direct functionality to the LOGi-Pi.  Additionally, high bandwidth SATA interconnects implementing impedance controlled LVDS lines can be interfaced.  By using LVDS, such applications as HDMI, SDR, LVDS camera interfaces, and other high bandwidth applications can easily be developed on the LOGi-Pi.  All applications are intended to be implemented without needing soldering, jumper wires, or \ldblquote perf\rdblquote  board expansion as is generally required to interface to many existing FPGA boards.\par
\par
High Performance Applications \par
The LOGi-Pi was designed to allow implementation of many high performance applications in a straightforward manner. Many popular applications are best served by the processing capabilities of an FPGA, including SDR (Software defined Radio), quad-copter control, computer vision, and bitcoin mining.    Applications have been created for the LOGI-Pi that implement machine vision, and bitcoin mining, and autonomous vehicle controller using GPS, 9-axis IMU, WIFI, and machine vision to run blob detection and color detection algorithms.   These applications are representative of a few of the applications that can be developed by using off-the-shelf components and integrating high performance CPU and FPGA technology.\par
\par
Beginners to experienced FPGA developers\par
The LOGi-Pi was designed to give beginners an easy way to delve into advanced applications.  The LOGi-applications are all open source and are available on github.  The applications are organized in such a way that the user will simply need to have git installed on their Raspberry Pi, pull the latest pre-built applications, plug in the hardware modules, including the LOGi-Pi, and then run a shell script that will load the bitstream into the FPGA, setup any needed Raspberry Pi drivers and software, and run the application.  The source code is completely open for customizations for those who are interested in getting into the nuts and the bolts of how the applications run.  \par
\par
No matter your experience level, there are fun applications to delve into that use the wide array of available electronics.  Let the LOGi-Pi be your gateway into exploring the latest technologies in creating fun, high performance, easy to use applications.   Watch for guides in the coming months that walk through the process of using the LOGi-Pi in conjunction with the Raspberry Pi to create these highly functional applications.\par
\par
 You can find information relevant to the LOGi-boards on the logi-blog [1], logi-wiki [2] or logi github repository [3].  Do you have a great idea for a cool project you would like to implement using a LOGi-Pi?  We just started the LOGi Contest which will get a free board if your ingenious project idea  and plans for implementation are selected as a winner by the LOGi-Team [4].  Want to get involved?  We would love to have the help of anyone interested that has some basic skills in HDL and programming (C, C++, python,etc).  Want to meet the mad geniuses behind LOGi-projects?  Meet Jonathan Piat, principal developer, and the LOGi-Team[5]?  Email us with  any feedback thoughts or suggestions[6]. \par
\par
[1] {\field{\*\fldinst{HYPERLINK "http://valentfx.com/logi-blog"}}{\fldrslt{\ul\cf1 http://valentfx.com/logi-blog}}}\f0\fs22\par
[2] {\field{\*\fldinst{HYPERLINK "http://valentfx.com/wiki"}}{\fldrslt{\ul\cf1 http://valentfx.com/wiki}}}\f0\fs22\par
[3] {\field{\*\fldinst{HYPERLINK "https://github.com/fpga-logi"}}{\fldrslt{\ul\cf1 https://github.com/fpga-logi}}}\f0\fs22\par
[4] {\field{\*\fldinst{HYPERLINK "http://valentfx.com/logi-blog/item/logi-contest"}}{\fldrslt{\ul\cf1 http://valentfx.com/logi-blog/item/logi-contest}}}\f0\fs22\par
[5] {\field{\*\fldinst{HYPERLINK "http://valentfx.com/logi-blog/category/logi-team"}}{\fldrslt{\ul\cf1 http://valentfx.com/logi-blog/category/logi-team}}}\f0\fs22\par
[6] support@valentfx.com\par
}
 